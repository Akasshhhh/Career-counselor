import { MessageRole } from "@/lib/types"
import { prisma } from "@/lib/db"
import { ChatSession, Message } from "@/lib/types/chat"
import { 
  AIMessage, 
  AIMessageRole,
  AIModel, 
  AIResponse, 
  CareerCounselorConfig, 
  ChatContext, 
  GenerateResponseResult 
} from "./types"
import {
  ValidationError,
  SessionNotFoundError,
  AIResponseError,
  DatabaseError
} from "./errors"

// Type guard for MessageRole
const isMessageRole = (value: unknown): value is MessageRole => {
  return Object.values(MessageRole).includes(value as MessageRole)
}

// Type guard for ChatSession from database result
const isValidChatSession = (session: any): session is ChatSession => {
  return !!session && 
         typeof session.id === 'string' &&
         typeof session.userId === 'string' &&
         Array.isArray(session.messages) &&
         (session.summary === null || typeof session.summary === 'string')
}

// Convert database message to AIMessage
const toAIMessage = (msg: {
  role: MessageRole
  content: string | null
  createdAt?: Date
}): AIMessage | null => {
  if (!msg.content) return null
  return {
    role: isMessageRole(msg.role) ? msg.role : MessageRole.USER,
    content: msg.content,
    ...(msg.createdAt && { createdAt: msg.createdAt })
  }
}

// Input validation with specific error types
export const validateInput = {
  sessionId: (sessionId: string) => {
    if (!sessionId || typeof sessionId !== 'string') {
      throw new ValidationError('Session ID is required and must be a string', 'sessionId')
    }
  },
  userId: (userId: string) => {
    if (!userId || typeof userId !== 'string') {
      throw new ValidationError('User ID is required and must be a string', 'userId')
    }
  },
  message: (message: string) => {
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      throw new ValidationError('Message is required and must be a non-empty string', 'message')
    }
  }
}

/**
 * Mock implementation of the AI model for development and testing purposes.
 * This class simulates AI responses without making actual API calls.
 */
class MockAI implements AIModel {
  /**
   * Generates a mock AI response for development and testing.
   * 
   * @param messages - Array of message objects representing the conversation history
   * @param temperature - Controls randomness in the response (ignored in mock)
   * @param maxTokens - Maximum number of tokens in the response (ignored in mock)
   * @returns A promise that resolves to a mock AI response
   */
  async generate({ 
    messages, 
    temperature = 0.7, 
    maxTokens = 1000 
  }: Parameters<AIModel['generate']>[0]): Promise<AIResponse> {
    return {
      id: 'mock-response-id',
      object: 'chat.completion',
      created: Date.now(),
      model: 'mock-model',
      choices: [{
        message: {
          role: MessageRole.ASSISTANT,
          content: "I'm a mock AI response. In a real implementation, this would be generated by an AI service."
        },
        index: 0,
        finish_reason: 'stop'
      }],
      usage: {
        prompt_tokens: 0,
        completion_tokens: 0,
        total_tokens: 0
      }
    }
  }
}

/**
 * Main class that handles AI-powered career counseling functionality.
 * This class manages chat sessions, message history, and AI response generation.
 * 
 * @example
 * ```typescript
 * const counselor = new CareerCounselorAI();
 * const response = await counselor.generateResponse(
 *   "What career suits me?",
 *   "session-123",
 *   "user-456"
 * );
 * ```
 */
export class CareerCounselorAI {
  private readonly config: Required<CareerCounselorConfig>
  private readonly model: AIModel
  
  /**
   * Default configuration for the career counselor
   */
  private static readonly DEFAULT_CONFIG: Required<CareerCounselorConfig> = {
    model: "gpt-4o-mini",
    temperature: 0.7,
    maxTokens: 1000,
    messageWindowSize: 15,
    summaryInterval: 20
  }

  /**
   * Creates a new instance of CareerCounselorAI with optional configuration.
   * 
   * @param config - Optional configuration object
   * @param config.model - The AI model to use (default: "gpt-4-turbo")
   * @param config.temperature - Controls randomness in AI responses (0-2, default: 0.7)
   * @param config.maxTokens - Maximum tokens in AI responses (1-4000, default: 1000)
   * @param config.messageWindowSize - Number of messages to include in context (1-100, default: 15)
   * @param config.summaryInterval - Update summary every N messages (1-1000, default: 20)
   */
  constructor(config: CareerCounselorConfig = {}) {
    // Validate and merge config with defaults
    this.config = {
      ...CareerCounselorAI.DEFAULT_CONFIG,
      ...this.validateConfig(config)
    }
    
    // Initialize the AI model
    this.model = new MockAI()
  }
  
  /**
   * Validate and sanitize configuration
   */
  private validateConfig(config: CareerCounselorConfig): Partial<CareerCounselorConfig> {
    const result: Partial<CareerCounselorConfig> = { ...config }
    
    // Validate model
    if (config.model && typeof config.model !== 'string') {
      console.warn('Invalid model configuration, using default')
      delete result.model
    }
    
    // Validate temperature (0-2)
    if (config.temperature !== undefined && 
        (typeof config.temperature !== 'number' || 
         config.temperature < 0 || 
         config.temperature > 2)) {
      console.warn('Temperature must be between 0 and 2, using default')
      delete result.temperature
    }
    
    // Validate maxTokens (1-4000)
    if (config.maxTokens !== undefined && 
        (typeof config.maxTokens !== 'number' || 
         config.maxTokens < 1 || 
         config.maxTokens > 4000)) {
      console.warn('maxTokens must be between 1 and 4000, using default')
      delete result.maxTokens
    }
    
    // Validate message window size (1-100)
    if (config.messageWindowSize !== undefined && 
        (typeof config.messageWindowSize !== 'number' || 
         config.messageWindowSize < 1 || 
         config.messageWindowSize > 100)) {
      console.warn('messageWindowSize must be between 1 and 100, using default')
      delete result.messageWindowSize
    }
    
    // Validate summary interval (1-1000)
    if (config.summaryInterval !== undefined && 
        (typeof config.summaryInterval !== 'number' || 
         config.summaryInterval < 1 || 
         config.summaryInterval > 1000)) {
      console.warn('summaryInterval must be between 1 and 1000, using default')
      delete result.summaryInterval
    }
    
    return result
  }

  /**
   * Generate a response using the AI model with proper context management
   * @param userMessage The user's message
   * @param sessionId The chat session ID for context
   * @param userId The user's ID for personalization
   * @returns The AI's response
   */
  /**
   * Generate a response to the user's message with proper context management
   * @param userMessage - The message from the user
   * @param sessionId - The ID of the chat session
   * @param userId - The ID of the user
   * @returns Object containing the AI's response and whether to update the summary
   * @throws {Error} If input validation fails or AI generation fails
   */
  /**
   * Generates a response to the user's message using AI with proper context management.
   * This method handles the complete flow from input validation to response generation.
   * 
   * @param userMessage - The message content from the user
   * @param sessionId - The unique identifier for the chat session
   * @param userId - The unique identifier for the user
   * @returns A promise that resolves to an object containing:
   *   - response: string - The AI-generated response
   *   - shouldUpdateSummary: boolean - Whether to update the conversation summary
   * 
   * @throws {ValidationError} When input validation fails (invalid message, session ID, or user ID)
   * @throws {SessionNotFoundError} When the specified chat session doesn't exist
   * @throws {AIResponseError} When there's an error generating the AI response
   * @throws {DatabaseError} When there's an error accessing the database
   * 
   * @example
   * ```typescript
   * try {
   *   const { response, shouldUpdateSummary } = await counselor.generateResponse(
   *     "What career suits me?",
   *     "session-123",
   *     "user-456"
   *   );
   *   console.log(response);
   * } catch (error) {
   *   if (error instanceof SessionNotFoundError) {
   *     console.error('Session not found');
   *   } else {
   *     console.error('Error generating response:', error);
   *   }
   * }
   * ```
   */
  async generateResponse(
    userMessage: string,
    sessionId: string,
    userId: string
  ): Promise<GenerateResponseResult> {
    try {
      // Input validation
      validateInput.message(userMessage)
      validateInput.sessionId(sessionId)
      validateInput.userId(userId)
      
      // 1. Get the chat context (summary + recent messages)
      const context = await this.getChatContext(sessionId, userId)
      
      // 2. Prepare the messages for the AI
      const messages = this.prepareMessages(userMessage, context)
      
      // 3. Generate the response using the model
      const aiResponse = await this.model.generate({
        messages,
        temperature: this.config.temperature,
        maxTokens: this.config.maxTokens
      })
      
      // 4. Determine if we should update the summary
      const shouldUpdateSummary = (context.totalMessages + 1) % this.config.summaryInterval === 0;
      
      return { response: aiResponse.choices[0].message.content, shouldUpdateSummary }
    } catch (error) {
      // Re-throw our custom errors as-is
      if (error instanceof ValidationError || 
          error instanceof SessionNotFoundError ||
          error instanceof AIResponseError ||
          error instanceof DatabaseError) {
        throw error;
      }
      
      // Wrap other errors in a generic AIResponseError
      console.error('Unexpected error in generateResponse:', error);
      throw new AIResponseError(
        'Failed to generate response. Please try again later.',
        error instanceof Error ? error : undefined
      );
    }
  }
  
  /**
   * Get the chat context including summary and recent messages
   */
  /**
   * Get the chat context including recent messages and summary
   * @param sessionId - The ID of the chat session
   * @param userId - The ID of the user
   * @returns The chat context including recent messages and summary
   * @throws {Error} If session is not found or database error occurs
   */
  /**
   * Retrieves the chat context including recent messages and conversation summary.
   * This method fetches the conversation history and metadata needed for AI context.
   * 
   * @param sessionId - The unique identifier for the chat session
   * @param userId - The unique identifier for the user (for authorization)
   * @returns A promise that resolves to the chat context object containing:
   *   - summary: string | undefined - The current conversation summary (if any)
   *   - recentMessages: AIMessage[] - Array of recent messages in the conversation
   *   - totalMessages: number - Total number of messages in the conversation
   * 
   * @throws {ValidationError} When sessionId or userId validation fails
   * @throws {SessionNotFoundError} When the specified chat session doesn't exist
   * @throws {DatabaseError} When there's an error accessing the database
   * 
   * @private
   */
  private async getChatContext(sessionId: string, userId: string): Promise<ChatContext> {
    validateInput.sessionId(sessionId)
    validateInput.userId(userId)
    
    try {
      const session = await prisma.chatSession.findUnique({
        where: { id: sessionId, userId },
        include: {
          messages: {
            orderBy: { createdAt: 'desc' },
            take: this.config.messageWindowSize,
            select: {
              content: true,
              role: true,
              createdAt: true
            }
          }
        }
      })
      
      if (!isValidChatSession(session)) {
        throw new SessionNotFoundError(sessionId);
      }
      
      try {
        // Get total message count
        const totalMessages = await prisma.message.count({
          where: { chatSessionId: sessionId }
        })
        
        // Map database messages to AIMessage format
        const recentMessages = session.messages
          .map(toAIMessage)
          .filter((msg): msg is AIMessage => msg !== null)
          .reverse() // Reverse to maintain chronological order
        
        return {
          summary: session.summary || undefined,
          recentMessages,
          totalMessages
        }
      } catch (dbError) {
        throw new DatabaseError(
          'Failed to retrieve chat messages',
          dbError instanceof Error ? dbError : undefined
        );
      }
    } catch (error) {
      if (error instanceof SessionNotFoundError) {
        throw error; // Re-throw as is
      }
      
      // Handle database errors
      if (error instanceof Error && 'code' in error) {
        throw new DatabaseError(
          'Database error while retrieving chat context',
          error
        );
      }
      
      // For any other errors, wrap them in a DatabaseError
      throw new DatabaseError(
        'Unexpected error while retrieving chat context',
        error instanceof Error ? error : undefined
      );
    }
  }
  
  /**
   * Prepares and formats messages for the AI model with proper context and structure.
   * This method constructs the conversation history in the format expected by the AI.
   * 
   * @param userMessage - The latest message from the user
   * @param context - The chat context including recent messages and summary
   * @returns An array of message objects formatted for the AI model
   * 
   * @private
   */
  private prepareMessages(userMessage: string, context: ChatContext): Array<{role: MessageRole; content: string}> {
    const messages: Array<{role: MessageRole; content: string}> = [];
    
    // 1. Add recent conversation history
    messages.push(...context.recentMessages.map(msg => ({
      role: msg.role,
      content: msg.content
    })));
    
    // 2. Add the new user message
    messages.push({
      role: MessageRole.USER,
      content: userMessage
    });
    
    return messages;
  } catch (error: unknown) {
    if (error instanceof SessionNotFoundError) {
      throw error; // Re-throw as is
    }
    // Handle other types of errors
    if (error instanceof Error) {
      throw new AIResponseError('Failed to generate AI response', error);
    }
    throw new AIResponseError('An unknown error occurred while generating response');
  }

  /**
   * Generate a prompt for summarizing the conversation
   */
  private getSummaryPrompt(messages: Array<{role: string, content: string}>): string {
    const conversation = messages
      .map(msg => `${msg.role.toUpperCase()}: ${msg.content}`)
      .join('\n\n')
    
    return `Please provide a concise summary of the following career counseling conversation. 
    Focus on key topics discussed, decisions made, and action items. Keep it under 200 words.
    
    Conversation:
    ${conversation}
    
    Summary:`
  }
  
  /**
   * Fallback response generator when AI generation fails
   */
  private generateFallbackResponse(messages: Array<{role: MessageRole; content: string}> = []): string {
    const userMessage = messages.find(m => m.role === MessageRole.USER)?.content || ''
    return this.generateCareerResponse(userMessage, messages)
  }

  // Enhanced career counseling response generator
  private generateCareerResponse(userMessage: string, conversationHistory: Array<{role: MessageRole; content: string}> = []): string {
    const message = userMessage.toLowerCase()
    const hasContext = conversationHistory.length > 0

    // System prompt for career counseling context
    const systemContext = `You are a professional career counselor with expertise in:
    - Career transitions and planning
    - Job search strategies
    - Professional development
    - Interview preparation
    - Workplace communication
    - Salary negotiation
    - Work-life balance`

    // Career transition responses
    if (message.includes("career change") || message.includes("transition") || message.includes("switch")) {
      return this.getCareerTransitionAdvice(userMessage, hasContext)
    }

    // Interview preparation responses
    if (message.includes("interview") || message.includes("job interview")) {
      return this.getInterviewAdvice(userMessage, hasContext)
    }

    // Skill development responses
    if (message.includes("skill") || message.includes("learn") || message.includes("develop")) {
      return this.getSkillDevelopmentAdvice(userMessage, hasContext)
    }

    // Networking responses
    if (message.includes("network") || message.includes("connect") || message.includes("relationship")) {
      return this.getNetworkingAdvice(userMessage, hasContext)
    }

    // Resume and job search
    if (message.includes("resume") || message.includes("cv") || message.includes("job search")) {
      return this.getJobSearchAdvice(userMessage, hasContext)
    }

    // Salary and negotiation
    if (message.includes("salary") || message.includes("negotiate") || message.includes("pay")) {
      return this.getSalaryAdvice(userMessage, hasContext)
    }

    // Work-life balance
    if (message.includes("work-life") || message.includes("balance") || message.includes("stress")) {
      return this.getWorkLifeAdvice(userMessage, hasContext)
    }

    // Default career counseling response
    return this.getGeneralCareerAdvice(userMessage, hasContext)
  }

  private getCareerTransitionAdvice(userMessage: string, hasContext: boolean): string {
    return `Career transitions require careful planning and strategic thinking. Here's a comprehensive approach:

**Phase 1: Self-Discovery & Assessment**
- Complete a thorough skills inventory (technical and soft skills)
- Identify your core values and what motivates you
- Assess your risk tolerance and financial situation
- Consider personality assessments (Myers-Briggs, StrengthsFinder)

**Phase 2: Market Research**
- Research target industries and roles thoroughly
- Analyze job market trends and growth projections
- Identify salary ranges and career progression paths
- Study required qualifications and certifications

**Phase 3: Skill Gap Analysis & Development**
- Compare your current skills with target role requirements
- Create a learning plan for missing competencies
- Consider formal education, certifications, or bootcamps
- Build a portfolio showcasing relevant projects

**Phase 4: Strategic Networking**
- Connect with professionals in your target field
- Attend industry events and join professional associations
- Conduct informational interviews to gain insights
- Build relationships before you need them

**Phase 5: Gradual Transition**
- Consider freelance or part-time work in the new field
- Volunteer for relevant projects or causes
- Take on cross-functional projects in your current role
- Build credibility and experience incrementally

${hasContext ? "Based on our previous conversation, " : ""}What specific field or role are you considering? I can provide more targeted guidance for your particular situation.`
  }

  private getInterviewAdvice(userMessage: string, hasContext: boolean): string {
    return `Interview success comes from thorough preparation and authentic presentation. Here's your complete guide:

**Pre-Interview Preparation (1-2 weeks before)**
- Research the company's mission, values, recent news, and competitors
- Study the job description and identify key requirements
- Prepare 5-7 STAR method examples for behavioral questions
- Practice your elevator pitch and key accomplishments
- Prepare thoughtful questions about the role, team, and company culture

**Technical Preparation**
- Review relevant technical skills and concepts
- Practice coding challenges or case studies if applicable
- Prepare a portfolio or work samples to discuss
- Rehearse explaining complex projects in simple terms

**Day of Interview**
- Arrive 10-15 minutes early (but not too early)
- Bring multiple copies of your resume and a notepad
- Dress appropriately for the company culture
- Maintain confident body language and eye contact

**During the Interview**
- Listen actively and ask clarifying questions
- Provide specific examples that demonstrate impact
- Show enthusiasm for the role and company
- Be honest about areas for growth while staying positive

**Common Questions to Master:**
- "Tell me about yourself" (2-minute professional story)
- "Why are you interested in this role/company?"
- "Describe a challenging situation and how you handled it"
- "What are your greatest strengths and areas for improvement?"
- "Where do you see yourself in 5 years?"

**Follow-up Strategy**
- Send thank-you emails within 24 hours
- Reference specific conversation points
- Reiterate your interest and qualifications
- Provide any additional information requested

${hasContext ? "Given what we've discussed, " : ""}What type of interview are you preparing for? I can provide more specific guidance based on the role and industry.`
  }

  private getSkillDevelopmentAdvice(userMessage: string, hasContext: boolean): string {
    return `Strategic skill development is crucial for career advancement. Here's how to approach it systematically:

**Skill Assessment & Prioritization**
- Analyze job descriptions for your target roles
- Identify both technical and soft skill gaps
- Consider future industry trends and emerging technologies
- Get feedback from managers, peers, and mentors

**Learning Strategy Framework**
- Set SMART goals for each skill (Specific, Measurable, Achievable, Relevant, Time-bound)
- Allocate dedicated learning time weekly (minimum 5-10 hours)
- Choose diverse learning methods for better retention
- Track progress and adjust approach as needed

**Technical Skills Development**
- Online platforms: Coursera, Udemy, LinkedIn Learning, Pluralsight
- Professional certifications relevant to your field
- Hands-on projects and portfolio building
- Open source contributions and side projects
- Bootcamps or formal education programs

**Soft Skills Enhancement**
- Communication: Join Toastmasters, practice presentations
- Leadership: Volunteer for team projects, mentor others
- Problem-solving: Take on challenging assignments
- Emotional intelligence: Seek feedback, practice active listening
- Time management: Use productivity frameworks (GTD, Pomodoro)

**Application & Validation**
- Apply new skills in real work projects immediately
- Seek stretch assignments that utilize new competencies
- Share knowledge through blog posts or presentations
- Get feedback from colleagues and supervisors
- Document achievements and impact for performance reviews

**Staying Current**
- Follow industry thought leaders and publications
- Attend conferences, webinars, and workshops
- Join professional communities and forums
- Participate in hackathons or competitions
- Maintain a learning journal to track insights

${hasContext ? "Considering our previous discussion, " : ""}What specific skills are you looking to develop? I can recommend targeted resources and create a personalized learning plan.`
  }

  private getNetworkingAdvice(userMessage: string, hasContext: boolean): string {
    return `Effective networking is about building genuine relationships that provide mutual value. Here's your comprehensive networking strategy:

**Digital Networking Excellence**
- Optimize your LinkedIn profile with a professional photo and compelling summary
- Share valuable industry insights and comment thoughtfully on others' posts
- Join relevant LinkedIn groups and participate in discussions
- Use Twitter/X to engage with industry leaders and share expertise
- Maintain an updated professional website or portfolio

**In-Person Networking Opportunities**
- Industry conferences and trade shows
- Professional association meetings and events
- Alumni networks from your school or previous companies
- Meetups and local professional groups
- Volunteer opportunities in your field
- Co-working spaces and professional communities

**Networking Best Practices**
- Focus on giving value before asking for anything
- Listen more than you speak - show genuine interest in others
- Follow up within 24-48 hours with personalized messages
- Maintain regular contact with your network (quarterly check-ins)
- Be authentic and build relationships, not just collect contacts

**Conversation Strategies**
- Prepare your elevator pitch but keep it conversational
- Ask open-ended questions about others' work and challenges
- Share relevant experiences and insights
- Offer help, resources, or connections when appropriate
- Exchange contact information naturally during meaningful conversations

**Long-term Relationship Building**
- Send relevant articles or opportunities to your contacts
- Make introductions between people in your network
- Celebrate others' achievements and milestones
- Offer your expertise when others need help
- Stay visible through consistent, valuable engagement

**Networking for Introverts**
- Start with one-on-one coffee meetings or informational interviews
- Attend smaller, more intimate events
- Prepare conversation starters and questions in advance
- Set realistic goals (meet 2-3 new people per event)
- Follow up online where you may feel more comfortable

${hasContext ? "Based on what you've shared, " : ""}What's your current networking situation? Are you looking to expand in your current field or build connections in a new industry?`
  }

  private getJobSearchAdvice(userMessage: string, hasContext: boolean): string {
    return `A successful job search requires strategy, persistence, and multiple approaches. Here's your complete job search framework:

**Resume & Application Materials**
- Tailor your resume for each application (use keywords from job descriptions)
- Quantify achievements with specific metrics and results
- Use a clean, ATS-friendly format with clear sections
- Write compelling cover letters that tell your story
- Create a portfolio showcasing your best work (if applicable)

**Job Search Channels (use multiple approaches)**
- Company websites and career pages (40% of jobs)
- Professional networking and referrals (30% of jobs)
- Job boards: LinkedIn, Indeed, Glassdoor, industry-specific sites
- Recruitment agencies and headhunters
- Social media and professional communities
- Career fairs and industry events

**Application Strategy**
- Apply within 24-48 hours of job posting when possible
- Keep detailed records of applications and follow-ups
- Customize each application to the specific role and company
- Follow application instructions precisely
- Apply to 10-15 positions per week for active searching

**Interview Preparation**
- Research each company thoroughly before interviews
- Prepare STAR method examples for behavioral questions
- Practice common interview questions with mock interviews
- Prepare thoughtful questions about the role and company
- Plan your interview outfit and route in advance

**Salary Negotiation**
- Research market rates using Glassdoor, PayScale, and industry reports
- Consider total compensation package, not just base salary
- Wait for an offer before discussing salary specifics
- Negotiate professionally and be prepared to justify your ask
- Consider non-salary benefits if base pay isn't flexible

**Managing the Process**
- Set daily and weekly job search goals
- Maintain a positive mindset despite rejections
- Continue learning and skill development during your search
- Stay organized with spreadsheets or job search apps
- Take care of your mental health and maintain work-life balance

**Following Up**
- Send thank-you emails after interviews within 24 hours
- Follow up on applications after 1-2 weeks if no response
- Maintain relationships with recruiters and hiring managers
- Keep your network updated on your search progress

${hasContext ? "Given our conversation, " : ""}What stage of the job search are you in? Are you looking to optimize your resume, improve your interview skills, or develop a comprehensive search strategy?`
  }

  private getSalaryAdvice(userMessage: string, hasContext: boolean): string {
    return `Salary negotiation is a critical career skill that can significantly impact your lifetime earnings. Here's your comprehensive guide:

**Research & Preparation**
- Use multiple sources: Glassdoor, PayScale, Salary.com, Levels.fyi (for tech)
- Consider location, company size, and industry variations
- Factor in your experience level, education, and unique skills
- Research the company's financial health and compensation philosophy
- Understand the full compensation package (benefits, equity, bonuses)

**When to Negotiate**
- After receiving a job offer (never during initial interviews)
- During performance reviews with documented achievements
- When taking on additional responsibilities or promotions
- When you have competing offers or market leverage
- After completing major projects or certifications

**Negotiation Strategy**
- Express enthusiasm for the role before discussing compensation
- Present your case based on market data and your value proposition
- Ask for a specific number, not a range
- Be prepared to justify your request with concrete examples
- Consider the entire package, not just base salary

**What to Negotiate Beyond Base Salary**
- Signing bonus or relocation assistance
- Additional vacation days or flexible work arrangements
- Professional development budget and conference attendance
- Stock options or equity participation
- Health insurance premiums or HSA contributions
- Title and reporting structure

**Negotiation Scripts & Phrases**
- "Based on my research and experience, I was expecting something closer to $X"
- "I'm excited about this opportunity. Can we discuss the compensation package?"
- "I'd like to understand the full benefits package before making a decision"
- "Is there flexibility in the salary range for this position?"

**Common Mistakes to Avoid**
- Accepting the first offer without negotiation
- Negotiating before receiving a formal offer
- Focusing only on salary and ignoring other benefits
- Being aggressive or making ultimatums
- Not having data to support your request

**For Current Employees**
- Document your achievements and quantify your impact
- Research internal pay equity and market rates
- Schedule a formal meeting with your manager
- Present a business case for your increase
- Be patient - salary adjustments often take time

**If Negotiation Isn't Successful**
- Ask about the timeline for salary reviews
- Negotiate for additional benefits or perks
- Request feedback on what would justify a higher salary
- Consider the long-term career growth potential
- Evaluate the total opportunity, not just immediate compensation

${hasContext ? "Considering what we've discussed, " : ""}Are you preparing for a salary negotiation with a new offer, or looking to increase your compensation in your current role?`
  }

  private getWorkLifeAdvice(userMessage: string, hasContext: boolean): string {
    return `Achieving sustainable work-life balance is essential for long-term career success and personal well-being. Here's a comprehensive approach:

**Setting Boundaries**
- Define clear work hours and communicate them to colleagues
- Create physical separation between work and personal spaces
- Turn off work notifications during personal time
- Learn to say "no" to non-essential requests that exceed your capacity
- Set realistic expectations with managers about workload and deadlines

**Time Management & Productivity**
- Use time-blocking to schedule both work tasks and personal activities
- Prioritize tasks using frameworks like Eisenhower Matrix
- Batch similar activities together for efficiency
- Take regular breaks to maintain focus and energy
- Delegate or automate routine tasks when possible

**Stress Management Techniques**
- Practice mindfulness or meditation (even 10 minutes daily helps)
- Regular exercise - find activities you enjoy and can sustain
- Maintain social connections outside of work
- Pursue hobbies and interests unrelated to your career
- Get adequate sleep (7-9 hours) and maintain consistent sleep schedule

**Communication Strategies**
- Have honest conversations with your manager about workload
- Discuss flexible work arrangements if needed
- Set expectations about response times for emails and messages
- Ask for help when you're overwhelmed
- Provide solutions when raising concerns about work-life balance

**Career Planning for Balance**
- Consider company culture and values when job searching
- Look for employers that genuinely support work-life balance
- Evaluate total compensation including time off and flexibility
- Plan career moves that align with your life stage and priorities
- Build skills that increase your value and negotiating power

**Managing Different Life Stages**
- Early career: Focus on learning while establishing healthy habits
- Mid-career: Balance advancement with family and personal commitments
- Senior career: Mentor others while maintaining your own well-being
- Career transitions: Use change as opportunity to reset boundaries

**Technology & Remote Work**
- Use technology to increase efficiency, not extend work hours
- Create rituals to transition between work and personal time
- Optimize your home office setup for productivity and comfort
- Maintain regular communication with remote colleagues
- Take advantage of flexibility while maintaining accountability

**Signs You Need Better Balance**
- Chronic fatigue or health issues
- Strained relationships with family and friends
- Decreased job performance or satisfaction
- Feeling constantly overwhelmed or anxious
- No time for personal interests or self-care

**Creating Sustainable Change**
- Start with small, manageable changes
- Track your time to identify where improvements can be made
- Regularly reassess and adjust your approach
- Celebrate progress and be patient with setbacks
- Remember that balance looks different for everyone

${hasContext ? "Based on our conversation, " : ""}What specific work-life balance challenges are you facing? Are you dealing with long hours, stress, boundary issues, or something else?`
  }

  private getGeneralCareerAdvice(userMessage: string, hasContext: boolean): string {
    return `Thank you for reaching out! As your career counselor, I'm here to provide personalized guidance for your professional journey.

**Areas I Can Help You With:**

🎯 **Career Planning & Strategy**
- Setting and achieving career goals
- Career path exploration and planning
- Industry transition strategies
- Professional brand development

💼 **Job Search & Applications**
- Resume and cover letter optimization
- Job search strategies and networking
- Interview preparation and practice
- Salary negotiation techniques

📈 **Professional Development**
- Skill assessment and development planning
- Leadership and communication skills
- Performance improvement strategies
- Continuing education and certifications

🤝 **Workplace Success**
- Managing workplace relationships
- Conflict resolution and communication
- Work-life balance strategies
- Career advancement tactics

**To Provide the Most Helpful Guidance:**

I'd love to learn more about your specific situation. Consider sharing:
- Your current role and industry
- Career goals or challenges you're facing
- Specific areas where you'd like support
- Timeline for any career changes you're considering

**Getting Started:**

Feel free to ask me about any career-related topic, such as:
- "How do I transition from [current field] to [target field]?"
- "What skills should I develop to advance in my career?"
- "How can I improve my interview performance?"
- "What's the best way to negotiate my salary?"
- "How do I build a professional network in my industry?"

${hasContext ? "I notice we've been discussing your career journey. " : ""}What specific career challenge or goal would you like to focus on today? The more details you can share, the more personalized and actionable my advice will be.

*Note: This is a demo version with enhanced responses. The full version will include AI-powered personalization and even more comprehensive career guidance.*`
  }

  /**
   * Generates a response using the actual OpenAI API.
   * This method is a placeholder for future OpenAI integration.
   * 
   * @param userMessage - The latest message from the user
   * @param conversationHistory - Array of previous messages in the conversation
   * @returns A promise that resolves to the AI-generated response text
   * @throws {AIResponseError} When there's an error with the OpenAI API
   * 
   * @public
   */
  async generateOpenAIResponse(userMessage: string, conversationHistory: AIMessage[] = []): Promise<string> {
    // This will be implemented when OpenAI integration is added
    // Example implementation:
    /*
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    const messages: AIMessage[] = [
      {
        role: 'system',
        content: `You are a professional career counselor with expertise in career transitions, job search strategies, professional development, interview preparation, workplace communication, salary negotiation, and work-life balance. Provide helpful, actionable advice tailored to the user's specific situation.`
      },
      ...conversationHistory,
      {
        role: 'user',
        content: userMessage
      }
    ]

    const response = await openai.chat.completions.create({
      model: this.config.model || 'gpt-4',
      messages,
      temperature: this.config.temperature || 0.7,
      max_tokens: this.config.maxTokens || 1000,
    })

    return response.choices[0]?.message?.content || 'I apologize, but I encountered an error generating a response.'
    */

    throw new Error("OpenAI integration not yet implemented. Using placeholder responses.")
  }
}

// Export singleton instance
export const careerCounselorAI = new CareerCounselorAI()
